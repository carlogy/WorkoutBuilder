// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, first_name, last_name, email, password, created_at, modified_at)
VALUES(
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    NOW(),
    NOW()
)
RETURNING id, first_name, last_name, email, created_at, modified_at
`

type CreateUserParams struct {
	FirstName sql.NullString
	LastName  sql.NullString
	Email     string
	Password  string
}

type CreateUserRow struct {
	ID         uuid.UUID
	FirstName  sql.NullString
	LastName   sql.NullString
	Email      string
	CreatedAt  sql.NullTime
	ModifiedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :one
DELETE FROM
    users u
WHERE
    u.id = $1
RETURNING id, first_name, last_name, email, created_at, modified_at
`

type DeleteUserByIdRow struct {
	ID         uuid.UUID
	FirstName  sql.NullString
	LastName   sql.NullString
	Email      string
	CreatedAt  sql.NullTime
	ModifiedAt sql.NullTime
}

func (q *Queries) DeleteUserById(ctx context.Context, id uuid.UUID) (DeleteUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, deleteUserById, id)
	var i DeleteUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
   id, first_name, last_name, email, password, created_at, modified_at
FROM
    users u
WHERE
    u.email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const updateUserById = `-- name: UpdateUserById :one
UPDATE
    users
SET
    first_name = $1,
    last_name = $2,
    email = $3,
    password = $4,
    modified_at = NOW()
WHERE
    id = $5
RETURNING id, first_name, last_name, email, created_at, modified_at
`

type UpdateUserByIdParams struct {
	FirstName sql.NullString
	LastName  sql.NullString
	Email     string
	Password  string
	ID        uuid.UUID
}

type UpdateUserByIdRow struct {
	ID         uuid.UUID
	FirstName  sql.NullString
	LastName   sql.NullString
	Email      string
	CreatedAt  sql.NullTime
	ModifiedAt sql.NullTime
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) (UpdateUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserById,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.ID,
	)
	var i UpdateUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
