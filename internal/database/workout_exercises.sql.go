// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: workout_exercises.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createWorkoutExercises = `-- name: CreateWorkoutExercises :exec
INSERT INTO workout_exercise (id, ordinal, workout_blockID, exerciseID, notes, created_at, modified_at)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    NOW(),
    NOW()
)
RETURNING id, ordinal, workout_blockid, exerciseid, notes, created_at, modified_at
`

type CreateWorkoutExercisesParams struct {
	ID             uuid.UUID
	Ordinal        sql.NullInt32
	WorkoutBlockid uuid.UUID
	Exerciseid     uuid.UUID
	Notes          sql.NullString
}

func (q *Queries) CreateWorkoutExercises(ctx context.Context, arg CreateWorkoutExercisesParams) error {
	_, err := q.db.ExecContext(ctx, createWorkoutExercises,
		arg.ID,
		arg.Ordinal,
		arg.WorkoutBlockid,
		arg.Exerciseid,
		arg.Notes,
	)
	return err
}

const getWorkoutExercisesByWorkoutID = `-- name: GetWorkoutExercisesByWorkoutID :many
SELECT
    we.id,
    we.ordinal,
    we.workout_blockID,
    we.exerciseID,
    we.notes,
    we.created_at,
    we.modified_at,
    wb.workoutid AS workoutID
FROM
    workout_exercise we
JOIN workout_blocks wb
    ON we.workout_blockID = wb.id
JOIN workouts w
    on wb.workoutid = w.id
WHERE
    w.id = $1
ORDER BY
    we.ordinal
`

type GetWorkoutExercisesByWorkoutIDRow struct {
	ID             uuid.UUID
	Ordinal        sql.NullInt32
	WorkoutBlockid uuid.UUID
	Exerciseid     uuid.UUID
	Notes          sql.NullString
	CreatedAt      sql.NullTime
	ModifiedAt     sql.NullTime
	Workoutid      uuid.UUID
}

func (q *Queries) GetWorkoutExercisesByWorkoutID(ctx context.Context, id uuid.UUID) ([]GetWorkoutExercisesByWorkoutIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutExercisesByWorkoutID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWorkoutExercisesByWorkoutIDRow
	for rows.Next() {
		var i GetWorkoutExercisesByWorkoutIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Ordinal,
			&i.WorkoutBlockid,
			&i.Exerciseid,
			&i.Notes,
			&i.CreatedAt,
			&i.ModifiedAt,
			&i.Workoutid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
