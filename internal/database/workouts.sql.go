// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: workouts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createWorkOut = `-- name: CreateWorkOut :one
INSERT INTO workouts (id, name, description,created_at, modified_at)
Values(
    $1,
    $2,
    $3,
    NOW(),
    NOW()
)
RETURNING id, name, description, created_at, modified_at
`

type CreateWorkOutParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateWorkOut(ctx context.Context, arg CreateWorkOutParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, createWorkOut, arg.ID, arg.Name, arg.Description)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteWorkoutByID = `-- name: DeleteWorkoutByID :one
DELETE FROM workouts
WHERE id = $1
RETURNING id, name, description, created_at, modified_at
`

func (q *Queries) DeleteWorkoutByID(ctx context.Context, id uuid.UUID) (Workout, error) {
	row := q.db.QueryRowContext(ctx, deleteWorkoutByID, id)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getWorkoutByID = `-- name: GetWorkoutByID :many
SELECT
    workouts.id, workouts.name, workouts.description, workouts.created_at, workouts.modified_at,
    workout_blocks.id, workout_blocks.ordinal, workout_blocks.workoutid, workout_blocks.restseconds_after_block, workout_blocks.created_at, workout_blocks.modified_at, workout_exercise.id, workout_exercise.ordinal, workout_exercise.workout_blockid, workout_exercise.exerciseid, workout_exercise.notes, workout_exercise.created_at, workout_exercise.modified_at, exercise_sets.id, exercise_sets.workout_exerciseid, exercise_sets.ordinal, exercise_sets.weight, exercise_sets.reps, exercise_sets.static_hold_time, exercise_sets.created_at, exercise_sets.modified_at
FROM workouts
JOIN workout_blocks on workout_blocks.workoutid = workouts.id
JOIN workout_exercise on workout_exercise.workout_blockid = workout_blocks.id
JOIN exercise_sets  on exercise_sets.workout_exerciseid = workout_exercise.id
WHERE workouts.id = $1
`

type GetWorkoutByIDRow struct {
	Workout         Workout
	WorkoutBlock    WorkoutBlock
	WorkoutExercise WorkoutExercise
	ExerciseSet     ExerciseSet
}

func (q *Queries) GetWorkoutByID(ctx context.Context, id uuid.UUID) ([]GetWorkoutByIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetWorkoutByIDRow
	for rows.Next() {
		var i GetWorkoutByIDRow
		if err := rows.Scan(
			&i.Workout.ID,
			&i.Workout.Name,
			&i.Workout.Description,
			&i.Workout.CreatedAt,
			&i.Workout.ModifiedAt,
			&i.WorkoutBlock.ID,
			&i.WorkoutBlock.Ordinal,
			&i.WorkoutBlock.Workoutid,
			&i.WorkoutBlock.RestsecondsAfterBlock,
			&i.WorkoutBlock.CreatedAt,
			&i.WorkoutBlock.ModifiedAt,
			&i.WorkoutExercise.ID,
			&i.WorkoutExercise.Ordinal,
			&i.WorkoutExercise.WorkoutBlockid,
			&i.WorkoutExercise.Exerciseid,
			&i.WorkoutExercise.Notes,
			&i.WorkoutExercise.CreatedAt,
			&i.WorkoutExercise.ModifiedAt,
			&i.ExerciseSet.ID,
			&i.ExerciseSet.WorkoutExerciseid,
			&i.ExerciseSet.Ordinal,
			&i.ExerciseSet.Weight,
			&i.ExerciseSet.Reps,
			&i.ExerciseSet.StaticHoldTime,
			&i.ExerciseSet.CreatedAt,
			&i.ExerciseSet.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkouts = `-- name: GetWorkouts :many
SELECT id, name, description, created_at, modified_at
FROM
    workouts
`

func (q *Queries) GetWorkouts(ctx context.Context) ([]Workout, error) {
	rows, err := q.db.QueryContext(ctx, getWorkouts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
