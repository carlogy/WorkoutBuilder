// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: muscle_groups.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createMuscleGroup = `-- name: CreateMuscleGroup :one
INSERT INTO muscle_groups (id, body_part, muscle_group, muscle_name, created_at, modified_at)
VALUES (
$1,
$2,
$3,
$4,
NOW(),
NOW()
)
RETURNING id, body_part, muscle_group, muscle_name, created_at, modified_at
`

type CreateMuscleGroupParams struct {
	ID          uuid.UUID
	BodyPart    string
	MuscleGroup string
	MuscleName  string
}

func (q *Queries) CreateMuscleGroup(ctx context.Context, arg CreateMuscleGroupParams) (MuscleGroup, error) {
	row := q.db.QueryRowContext(ctx, createMuscleGroup,
		arg.ID,
		arg.BodyPart,
		arg.MuscleGroup,
		arg.MuscleName,
	)
	var i MuscleGroup
	err := row.Scan(
		&i.ID,
		&i.BodyPart,
		&i.MuscleGroup,
		&i.MuscleName,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getMuscleGroupByMuscleName = `-- name: GetMuscleGroupByMuscleName :one
SELECT id, body_part, muscle_group, muscle_name, created_at, modified_at
FROM
    muscle_groups mg
WHERE
    mg.muscle_name = $1
`

func (q *Queries) GetMuscleGroupByMuscleName(ctx context.Context, muscleName string) (MuscleGroup, error) {
	row := q.db.QueryRowContext(ctx, getMuscleGroupByMuscleName, muscleName)
	var i MuscleGroup
	err := row.Scan(
		&i.ID,
		&i.BodyPart,
		&i.MuscleGroup,
		&i.MuscleName,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getMuscleGroupsByExerciseID = `-- name: GetMuscleGroupsByExerciseID :many
Select
     mg.id, mg.body_part, mg.muscle_group, mg.muscle_name, mg.created_at, mg.modified_at, emg.id, emg.exercise_id, emg.muscle_groups_id, emg.primary_muscle, emg.secondary_muscle, emg.created_at, emg.modified_at
FROM
    muscle_groups mg
JOIN exercise_muscle_groups emg
    ON emg.muscle_groups_id = mg.id
WHERE
    emg.exercise_id = $1
ORDER BY emg.primary_muscle, emg.secondary_muscle
`

type GetMuscleGroupsByExerciseIDRow struct {
	MuscleGroup         MuscleGroup
	ExerciseMuscleGroup ExerciseMuscleGroup
}

func (q *Queries) GetMuscleGroupsByExerciseID(ctx context.Context, exerciseID uuid.UUID) ([]GetMuscleGroupsByExerciseIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getMuscleGroupsByExerciseID, exerciseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMuscleGroupsByExerciseIDRow
	for rows.Next() {
		var i GetMuscleGroupsByExerciseIDRow
		if err := rows.Scan(
			&i.MuscleGroup.ID,
			&i.MuscleGroup.BodyPart,
			&i.MuscleGroup.MuscleGroup,
			&i.MuscleGroup.MuscleName,
			&i.MuscleGroup.CreatedAt,
			&i.MuscleGroup.ModifiedAt,
			&i.ExerciseMuscleGroup.ID,
			&i.ExerciseMuscleGroup.ExerciseID,
			&i.ExerciseMuscleGroup.MuscleGroupsID,
			&i.ExerciseMuscleGroup.PrimaryMuscle,
			&i.ExerciseMuscleGroup.SecondaryMuscle,
			&i.ExerciseMuscleGroup.CreatedAt,
			&i.ExerciseMuscleGroup.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMuscleGroupsForAllExercises = `-- name: GetMuscleGroupsForAllExercises :many
Select
     mg.id, mg.body_part, mg.muscle_group, mg.muscle_name, mg.created_at, mg.modified_at, emg.id, emg.exercise_id, emg.muscle_groups_id, emg.primary_muscle, emg.secondary_muscle, emg.created_at, emg.modified_at
FROM
    muscle_groups mg
JOIN exercise_muscle_groups emg
    ON emg.muscle_groups_id = mg.id
ORDER BY emg.primary_muscle, emg.secondary_muscle
`

type GetMuscleGroupsForAllExercisesRow struct {
	MuscleGroup         MuscleGroup
	ExerciseMuscleGroup ExerciseMuscleGroup
}

func (q *Queries) GetMuscleGroupsForAllExercises(ctx context.Context) ([]GetMuscleGroupsForAllExercisesRow, error) {
	rows, err := q.db.QueryContext(ctx, getMuscleGroupsForAllExercises)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMuscleGroupsForAllExercisesRow
	for rows.Next() {
		var i GetMuscleGroupsForAllExercisesRow
		if err := rows.Scan(
			&i.MuscleGroup.ID,
			&i.MuscleGroup.BodyPart,
			&i.MuscleGroup.MuscleGroup,
			&i.MuscleGroup.MuscleName,
			&i.MuscleGroup.CreatedAt,
			&i.MuscleGroup.ModifiedAt,
			&i.ExerciseMuscleGroup.ID,
			&i.ExerciseMuscleGroup.ExerciseID,
			&i.ExerciseMuscleGroup.MuscleGroupsID,
			&i.ExerciseMuscleGroup.PrimaryMuscle,
			&i.ExerciseMuscleGroup.SecondaryMuscle,
			&i.ExerciseMuscleGroup.CreatedAt,
			&i.ExerciseMuscleGroup.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
