// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: workout_blocks.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createWorkoutBlocks = `-- name: CreateWorkoutBlocks :exec
INSERT INTO workout_blocks (id, ordinal, workoutID, restSeconds_after_block, created_at, modified_at)
VALUES(
    $1,
    $2,
    $3,
    $4,
    NOW(),
    NOW()
)
RETURNING id, ordinal, workoutid, restseconds_after_block, created_at, modified_at
`

type CreateWorkoutBlocksParams struct {
	ID                    uuid.UUID
	Ordinal               sql.NullInt32
	Workoutid             uuid.UUID
	RestsecondsAfterBlock sql.NullInt32
}

func (q *Queries) CreateWorkoutBlocks(ctx context.Context, arg CreateWorkoutBlocksParams) error {
	_, err := q.db.ExecContext(ctx, createWorkoutBlocks,
		arg.ID,
		arg.Ordinal,
		arg.Workoutid,
		arg.RestsecondsAfterBlock,
	)
	return err
}

const getWorkoutBlocksByWOID = `-- name: GetWorkoutBlocksByWOID :many
SELECT id, ordinal, workoutid, restseconds_after_block, created_at, modified_at
FROM
    workout_blocks
WHERE
    workoutID = $1
ORDER BY ordinal
`

func (q *Queries) GetWorkoutBlocksByWOID(ctx context.Context, workoutid uuid.UUID) ([]WorkoutBlock, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutBlocksByWOID, workoutid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WorkoutBlock
	for rows.Next() {
		var i WorkoutBlock
		if err := rows.Scan(
			&i.ID,
			&i.Ordinal,
			&i.Workoutid,
			&i.RestsecondsAfterBlock,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
