// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_exercises.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createUserExercise = `-- name: CreateUserExercise :one
INSERT INTO user_exercises(id, userId, exerciseId, sets_weight, rest, duration, decline_incline, notes, created_at, modified_at)
Values(
    gen_random_uuid(),
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    NOW(),
    NOW()
)
RETURNING id, userid, exerciseid, sets_weight, rest, duration, decline_incline, notes, created_at, modified_at
`

type CreateUserExerciseParams struct {
	Userid         uuid.UUID
	Exerciseid     uuid.UUID
	SetsWeight     pqtype.NullRawMessage
	Rest           sql.NullInt64
	Duration       sql.NullInt64
	DeclineIncline sql.NullInt64
	Notes          sql.NullString
}

func (q *Queries) CreateUserExercise(ctx context.Context, arg CreateUserExerciseParams) (UserExercise, error) {
	row := q.db.QueryRowContext(ctx, createUserExercise,
		arg.Userid,
		arg.Exerciseid,
		arg.SetsWeight,
		arg.Rest,
		arg.Duration,
		arg.DeclineIncline,
		arg.Notes,
	)
	var i UserExercise
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Exerciseid,
		&i.SetsWeight,
		&i.Rest,
		&i.Duration,
		&i.DeclineIncline,
		&i.Notes,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteUserExerciseRecordById = `-- name: DeleteUserExerciseRecordById :one
DELETE FROM user_exercises ue
WHERE ue.id = $1
RETURNING id, userid, exerciseid, sets_weight, rest, duration, decline_incline, notes, created_at, modified_at
`

func (q *Queries) DeleteUserExerciseRecordById(ctx context.Context, id uuid.UUID) (UserExercise, error) {
	row := q.db.QueryRowContext(ctx, deleteUserExerciseRecordById, id)
	var i UserExercise
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Exerciseid,
		&i.SetsWeight,
		&i.Rest,
		&i.Duration,
		&i.DeclineIncline,
		&i.Notes,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getUserExerciseRecordById = `-- name: GetUserExerciseRecordById :one
SELECT
    id, userid, exerciseid, sets_weight, rest, duration, decline_incline, notes, created_at, modified_at
FROM
    user_exercises ue
WHERE
    ue.id = $1 LIMIT 1
`

func (q *Queries) GetUserExerciseRecordById(ctx context.Context, id uuid.UUID) (UserExercise, error) {
	row := q.db.QueryRowContext(ctx, getUserExerciseRecordById, id)
	var i UserExercise
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Exerciseid,
		&i.SetsWeight,
		&i.Rest,
		&i.Duration,
		&i.DeclineIncline,
		&i.Notes,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const updateUserExcerciseRecordById = `-- name: UpdateUserExcerciseRecordById :one
UPDATE
    user_exercises
SET
    sets_weight = $1,
    rest = $2,
    duration = $3,
    decline_incline = $4,
    notes = $5,
    modified_at = NOW()
WHERE
    id = $6
RETURNING id, userid, exerciseid, sets_weight, rest, duration, decline_incline, notes, created_at, modified_at
`

type UpdateUserExcerciseRecordByIdParams struct {
	SetsWeight     pqtype.NullRawMessage
	Rest           sql.NullInt64
	Duration       sql.NullInt64
	DeclineIncline sql.NullInt64
	Notes          sql.NullString
	ID             uuid.UUID
}

func (q *Queries) UpdateUserExcerciseRecordById(ctx context.Context, arg UpdateUserExcerciseRecordByIdParams) (UserExercise, error) {
	row := q.db.QueryRowContext(ctx, updateUserExcerciseRecordById,
		arg.SetsWeight,
		arg.Rest,
		arg.Duration,
		arg.DeclineIncline,
		arg.Notes,
		arg.ID,
	)
	var i UserExercise
	err := row.Scan(
		&i.ID,
		&i.Userid,
		&i.Exerciseid,
		&i.SetsWeight,
		&i.Rest,
		&i.Duration,
		&i.DeclineIncline,
		&i.Notes,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
