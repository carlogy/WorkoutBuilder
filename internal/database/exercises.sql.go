// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: exercises.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const checkExerciseExists = `-- name: CheckExerciseExists :one
SELECT EXISTS (
SELECT 1
FROM
    exercises
WHERE name = $1
)
`

func (q *Queries) CheckExerciseExists(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkExerciseExists, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createExercise = `-- name: CreateExercise :one
INSERT INTO exercises (id, name, exercise_type, equipment, description, has_primary_muscles, has_secondary_muscles, created_at, modified_at
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    NOW(),
    NOW()
)
RETURNING id, name, exercise_type, equipment, description, has_primary_muscles, has_secondary_muscles, created_at, modified_at
`

type CreateExerciseParams struct {
	ID                  uuid.UUID
	Name                string
	ExerciseType        string
	Equipment           string
	Description         sql.NullString
	HasPrimaryMuscles   sql.NullBool
	HasSecondaryMuscles sql.NullBool
}

func (q *Queries) CreateExercise(ctx context.Context, arg CreateExerciseParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, createExercise,
		arg.ID,
		arg.Name,
		arg.ExerciseType,
		arg.Equipment,
		arg.Description,
		arg.HasPrimaryMuscles,
		arg.HasSecondaryMuscles,
	)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExerciseType,
		&i.Equipment,
		&i.Description,
		&i.HasPrimaryMuscles,
		&i.HasSecondaryMuscles,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteExerciseById = `-- name: DeleteExerciseById :one
DELETE FROM exercises e
WHERE e.id = $1
RETURNING id, name, exercise_type, equipment, description, has_primary_muscles, has_secondary_muscles, created_at, modified_at
`

func (q *Queries) DeleteExerciseById(ctx context.Context, id uuid.UUID) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, deleteExerciseById, id)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExerciseType,
		&i.Equipment,
		&i.Description,
		&i.HasPrimaryMuscles,
		&i.HasSecondaryMuscles,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getExerciseById = `-- name: GetExerciseById :one
SELECT
    id, name, exercise_type, equipment, description, has_primary_muscles, has_secondary_muscles, created_at, modified_at
FROM
    exercises e
WHERE
    e.id = $1
LIMIT 1
`

func (q *Queries) GetExerciseById(ctx context.Context, id uuid.UUID) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, getExerciseById, id)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ExerciseType,
		&i.Equipment,
		&i.Description,
		&i.HasPrimaryMuscles,
		&i.HasSecondaryMuscles,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getExercises = `-- name: GetExercises :many
SELECT
    id, name, exercise_type, equipment, description, has_primary_muscles, has_secondary_muscles, created_at, modified_at
FROM
    exercises e
`

func (q *Queries) GetExercises(ctx context.Context) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, getExercises)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ExerciseType,
			&i.Equipment,
			&i.Description,
			&i.HasPrimaryMuscles,
			&i.HasSecondaryMuscles,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
